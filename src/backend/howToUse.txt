InterVarsity Hackathon 2025 - API Quick Reference

==============================
USER FUNCTIONS
==============================

signIn(email, username, password)
  - Parameters: string, string, string
  - Returns: Inserted user ID or null
  - Example: await signIn("test@example.com","testUser","Abc123");

loginUser(username, password)
  - Parameters: string, string
  - Returns: User object or null
  - Example: await loginUser("testUser","Abc123");

updateEmail(currentUsername, newEmail)
  - Parameters: string, string
  - Returns: Modified count or null
  - Example: await updateEmail("testUser","new@example.com");

updateUsername(currentUsername, newUsername)
  - Parameters: string, string
  - Returns: Modified count or null
  - Example: await updateUsername("testUser","newUser");

updatePassword(username, newPassword)
  - Parameters: string, string
  - Returns: Modified count or null
  - Example: await updatePassword("testUser","NewPass123");

deleteAccount(username, password)
  - Parameters: string, string
  - Returns: Deleted count or null
  - Example: await deleteAccount("testUser","Abc123");

getUserOverallBudget(username)
  - Parameters: string
  - Returns: Number (budget) or null
  - Example: await getUserOverallBudget("testUser");

setOverallBudget(username, budget)
  - Parameters: string, number
  - Returns: Modified count or null
  - Example: await setOverallBudget("testUser",5000);

updateOverallBudget(username, newBudget)
  - Parameters: string, number
  - Returns: Modified count or null
  - Example: await updateOverallBudget("testUser",6000);

getUserDetails(username)
  - Parameters: string
  - Returns: User object (no password) or null
  - Example: await getUserDetails("testUser");

getUserEvents(username)
  - Parameters: string
  - Returns: Array of event IDs or null
  - Example: await getUserEvents("testUser");

==============================
EVENT FUNCTIONS
==============================

createEvent(username, eventName, budget = 0, date = null)
  - Parameters: string, string, number, string
  - Returns: Event object or null
  - Example: await createEvent("testUser","Fundraiser",1000,"2025-09-15");

addUserToEvent(eventName, username)
  - Parameters: string, string
  - Returns: Updated event object or null
  - Example: await addUserToEvent("Fundraiser","anotherUser");

removeUserFromEvent(eventName, username)
  - Parameters: string, string
  - Returns: Updated event object or null
  - Example: await removeUserFromEvent("Fundraiser","anotherUser");

getEventDetails(eventName)
  - Parameters: string
  - Returns: Event object or null
  - Example: await getEventDetails("Fundraiser");

getEventParticipants(eventName)
  - Parameters: string
  - Returns: Array of participant objects or null
  - Example: await getEventParticipants("Fundraiser");

addContribution(username, eventId, amount)
  - Parameters: string, string, number
  - Returns: Modified count or null
  - Example: await addContribution("john_doe", "event_123", 50)

search(type, searchParams)
  - Parameters: type (string), searchParams (string)
  - Returns: An array of search results from the relevant handler function, or null if the type is invalid.
  - Example: await search("user", "john")

requestSubsidy(username, eventId)
  - Parameters: username (string), eventId (string)
  - Returns: The modifiedCount (number) indicating the number of documents updated, or null if the event or user is not found.
  - Example: await requestSubsidy("jane_doe", "event_456")

contributeToSubsidy(username, eventId, amount)
  - Parameters: username (string), eventId (string), amount (number)
  - Returns: The return value of the addContribution function (modified count or null).
  - Example: await contributeToSubsidy("john_doe", "event_123", 25)

updateEvent(username, eventId, updates)
  - Parameters: username (string), eventId (string), updates (object)
  - Returns: The modifiedCount (number) if the update is successful, or null otherwise.
  - Example: await updateEvent("john_doe", "event_123", { newName: "Community Gathering", newBudget: 500 })

deleteEvent(username, eventId)
  - Parameters: username (string), eventId (string)
  - Returns: The deletedCount (number) if the deletion is successful, or null otherwise.
  - Example: await deleteEvent("jane_doe", "event_456")

listUpcomingEvents(username)
  - Parameters: username (string)
  - Returns: An array of event documents, or an empty array if no upcoming events are found.
  - Example: await listUpcomingEvents("john_doe")

getEventSummary(username, eventId)
  - Parameters: username (string), eventId (string)
  - Returns: The event document or null if the event is not found or the user is not the creator.
  - Example: await getEventSummary("john_doe", "event_123")

commentOnEvent(username, eventId, message)
  - Parameters: username (string), eventId (string), message (string)
  - Returns: The modifiedCount (number) if the update is successful, or null if the user is not a participant.
  - Example: await commentOnEvent("jane_doe", "event_456", "This looks like fun!")

==============================
HELPER FUNCTIONS
==============================

generateId()
  - Parameters: None
  - Returns: Random 3-letter + 3-digit ID
  - Example: generateId(); // e.g., "AbC123"

isValidEmailFormat(email)
  - Parameters: string
  - Returns: true / false
  - Example: isValidEmailFormat("test@example.com");

isValidUsernameFormat(username)
  - Parameters: string
  - Returns: true / false
  - Example: isValidUsernameFormat("user123");

isValidPassword(password)
  - Parameters: string
  - Returns: true / false
  - Example: isValidPassword("Abc123");

handleUserSearch(text)
  - Parameters: text (string)
  - Returns: An array of user documents that match the search criteria, or null if an error occurs.
  - Example: await handleUserSearch("john")

handleEventSearch(text)
  - Parameters: text (string)
  - Returns: An array of event documents that match the search criteria, or null if an error occurs.
  - Example: await handleEventSearch("fundraiser")

==============================
NOTES
==============================

- All async functions use MongoDB connection automatically.
- Return null indicates failure or non-existent user/event.
- Passwords are stored as plain text; hashing is recommended for production.
- Events are linked to users through the 'events' array in user objects.
- Participants are stored inside the event document under 'participants'.
